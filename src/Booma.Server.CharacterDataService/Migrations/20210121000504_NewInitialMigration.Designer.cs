// <auto-generated />
using System;
using Glader.ASP.RPGCharacter;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Booma.Server.CharacterDataService.Migrations
{
    [DbContext(typeof(RPGCharacterDatabaseContext<PsobbCustomizationSlots, Vector3<ushort>, PsobbProportionSlots, Vector2<float>>))]
    [Migration("20210121000504_NewInitialMigration")]
    partial class NewInitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Glader.ASP.RPGCharacter.DBRPGCharacter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastModifiedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("character");
                });

            modelBuilder.Entity("Glader.ASP.RPGCharacter.DBRPGCharacterCustomizableSlot<Booma.PsobbCustomizationSlots, Booma.Vector3<ushort>>", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("SlotType")
                        .HasColumnType("int");

                    b.Property<int>("CustomizationId")
                        .HasColumnType("int");

                    b.HasKey("CharacterId", "SlotType");

                    b.HasIndex("CharacterId");

                    b.HasIndex("SlotType");

                    b.ToTable("character_customization_slot");
                });

            modelBuilder.Entity("Glader.ASP.RPGCharacter.DBRPGCharacterCustomizableSlotType<Booma.PsobbCustomizationSlots>", b =>
                {
                    b.Property<int>("SlotType")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VisualName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("SlotType");

                    b.ToTable("character_customization_slot_type");

                    b.HasData(
                        new
                        {
                            SlotType = 1,
                            Description = "",
                            VisualName = "Costume"
                        },
                        new
                        {
                            SlotType = 2,
                            Description = "",
                            VisualName = "Skin"
                        },
                        new
                        {
                            SlotType = 3,
                            Description = "",
                            VisualName = "Face"
                        },
                        new
                        {
                            SlotType = 4,
                            Description = "",
                            VisualName = "Head"
                        },
                        new
                        {
                            SlotType = 5,
                            Description = "",
                            VisualName = "Hair"
                        },
                        new
                        {
                            SlotType = 6,
                            Description = "",
                            VisualName = "Override"
                        });
                });

            modelBuilder.Entity("Glader.ASP.RPGCharacter.DBRPGCharacterOwnership", b =>
                {
                    b.Property<int>("OwnershipId")
                        .HasColumnType("int");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.HasKey("OwnershipId", "CharacterId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("OwnershipId");

                    b.ToTable("character_ownership");
                });

            modelBuilder.Entity("Glader.ASP.RPGCharacter.DBRPGCharacterProgress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("PlayTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("time(6)")
                        .HasDefaultValue(new TimeSpan(0, 0, 0, 0, 0));

                    b.HasKey("Id");

                    b.ToTable("character_progress");
                });

            modelBuilder.Entity("Glader.ASP.RPGCharacter.DBRPGCharacterProportionSlot<Booma.PsobbProportionSlots, Booma.Vector2<float>>", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("SlotType")
                        .HasColumnType("int");

                    b.HasKey("CharacterId", "SlotType");

                    b.HasIndex("CharacterId");

                    b.HasIndex("SlotType");

                    b.ToTable("character_proportion_slot");
                });

            modelBuilder.Entity("Glader.ASP.RPGCharacter.DBRPGCharacterProportionSlotType<Booma.PsobbProportionSlots>", b =>
                {
                    b.Property<int>("SlotType")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VisualName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("SlotType");

                    b.ToTable("character_proportion_slot_type");

                    b.HasData(
                        new
                        {
                            SlotType = 1,
                            Description = "",
                            VisualName = "Default"
                        });
                });

            modelBuilder.Entity("Glader.ASP.RPGCharacter.DBRPGCharacter", b =>
                {
                    b.HasOne("Glader.ASP.RPGCharacter.DBRPGCharacterProgress", "Progress")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Glader.ASP.RPGCharacter.DBRPGCharacterCustomizableSlot<Booma.PsobbCustomizationSlots, Booma.Vector3<ushort>>", b =>
                {
                    b.HasOne("Glader.ASP.RPGCharacter.DBRPGCharacter", null)
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Glader.ASP.RPGCharacter.DBRPGCharacterCustomizableSlotType<Booma.PsobbCustomizationSlots>", "SlotDefinition")
                        .WithMany()
                        .HasForeignKey("SlotType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Booma.Vector3<ushort>", "SlotColor", b1 =>
                        {
                            b1.Property<int>("DBRPGCharacterCustomizableSlot<PsobbCustomizationSlots, Vector3<ushort>>CharacterId")
                                .HasColumnType("int");

                            b1.Property<int>("DBRPGCharacterCustomizableSlot<PsobbCustomizationSlots, Vector3<ushort>>SlotType")
                                .HasColumnType("int");

                            b1.Property<ushort>("X")
                                .HasColumnType("smallint unsigned");

                            b1.Property<ushort>("Y")
                                .HasColumnType("smallint unsigned");

                            b1.Property<ushort>("Z")
                                .HasColumnType("smallint unsigned");

                            b1.HasKey("DBRPGCharacterCustomizableSlot<PsobbCustomizationSlots, Vector3<ushort>>CharacterId", "DBRPGCharacterCustomizableSlot<PsobbCustomizationSlots, Vector3<ushort>>SlotType");

                            b1.ToTable("character_customization_slot");

                            b1.WithOwner()
                                .HasForeignKey("DBRPGCharacterCustomizableSlot<PsobbCustomizationSlots, Vector3<ushort>>CharacterId", "DBRPGCharacterCustomizableSlot<PsobbCustomizationSlots, Vector3<ushort>>SlotType");
                        });
                });

            modelBuilder.Entity("Glader.ASP.RPGCharacter.DBRPGCharacterOwnership", b =>
                {
                    b.HasOne("Glader.ASP.RPGCharacter.DBRPGCharacter", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Glader.ASP.RPGCharacter.DBRPGCharacterProportionSlot<Booma.PsobbProportionSlots, Booma.Vector2<float>>", b =>
                {
                    b.HasOne("Glader.ASP.RPGCharacter.DBRPGCharacter", null)
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Glader.ASP.RPGCharacter.DBRPGCharacterProportionSlotType<Booma.PsobbProportionSlots>", "SlotDefinition")
                        .WithMany()
                        .HasForeignKey("SlotType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Booma.Vector2<float>", "Proportion", b1 =>
                        {
                            b1.Property<int>("DBRPGCharacterProportionSlot<PsobbProportionSlots, Vector2<float>>CharacterId")
                                .HasColumnType("int");

                            b1.Property<int>("DBRPGCharacterProportionSlot<PsobbProportionSlots, Vector2<float>>SlotType")
                                .HasColumnType("int");

                            b1.Property<float>("X")
                                .HasColumnType("float");

                            b1.Property<float>("Y")
                                .HasColumnType("float");

                            b1.HasKey("DBRPGCharacterProportionSlot<PsobbProportionSlots, Vector2<float>>CharacterId", "DBRPGCharacterProportionSlot<PsobbProportionSlots, Vector2<float>>SlotType");

                            b1.ToTable("character_proportion_slot");

                            b1.WithOwner()
                                .HasForeignKey("DBRPGCharacterProportionSlot<PsobbProportionSlots, Vector2<float>>CharacterId", "DBRPGCharacterProportionSlot<PsobbProportionSlots, Vector2<float>>SlotType");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
