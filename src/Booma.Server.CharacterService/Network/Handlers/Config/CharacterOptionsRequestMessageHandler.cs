using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Booma;
using Common.Logging;
using Glader.ASP.GameConfig;
using Glader.ASP.ServiceDiscovery;
using Glader.Essentials;
using GladNet;

namespace Booma
{
	/// <summary>
	/// Message handler for <see cref="CharacterOptionsRequestPayload"/> which returns a <see cref="CharacterOptionsResponsePayload"/>.
	/// </summary>
	public sealed class CharacterOptionsRequestMessageHandler : GameRequestMessageHandler<CharacterOptionsRequestPayload, CharacterOptionsResponsePayload>
	{
		private ILog Logger { get; }

		private IServiceResolver<IGameConfigurationService<PsobbGameConfigurationType>> ConfigServiceResolver { get; }

		public CharacterOptionsRequestMessageHandler(ILog logger, 
			IServiceResolver<IGameConfigurationService<PsobbGameConfigurationType>> configServiceResolver)
		{
			Logger = logger ?? throw new ArgumentNullException(nameof(logger));
			ConfigServiceResolver = configServiceResolver ?? throw new ArgumentNullException(nameof(configServiceResolver));
		}

		/// <inheritdoc />
		protected override async Task<CharacterOptionsResponsePayload> HandleRequestAsync(SessionMessageContext<PSOBBGamePacketPayloadServer> context, CharacterOptionsRequestPayload message, CancellationToken token = default)
		{
			if (Logger.IsDebugEnabled)
				Logger.Debug($"Client: {context.Details.ConnectionId} sent Options Request.");

			//We should not try to send defaults if the config service
			//is unavailable, because this will override their config
			//therefore we should just disconnect in that case.
			var resolveResult = await ConfigServiceResolver.Create(token);

			if (!resolveResult.isAvailable)
				return await LogServiceErrorAndDisconnectAsync(context);

			var bindQueryResult = await resolveResult.Instance.RetrieveConfigAsync(ConfigurationSourceType.Account, PsobbGameConfigurationType.Key, token);
			var joystickQueryResult = await resolveResult.Instance.RetrieveConfigAsync(ConfigurationSourceType.Account, PsobbGameConfigurationType.Joystick, token);

			//Success means we can directly send down the stored binary data
			if(bindQueryResult.isSuccessful && joystickQueryResult.isSuccessful)
				return new CharacterOptionsResponsePayload(new CharacterOptionsConfiguration(new BindingsConfig(bindQueryResult.Result.Data, joystickQueryResult.Result.Data), 1, new AccountTeamInformation(0, new uint[2], 0, 0, String.Empty, 0)));

			//We have special cases for certain results
			//If not found, that means none exist yet so we should send a default result.
			//Other cases are general failure.
			switch(bindQueryResult.ResultCode)
			{
				//Save it and then send the default.
				case GameConfigQueryResponseCode.ContentNotFound:
					return await HandleNoKeybindStoredAsync(resolveResult, token);
				default:
					return await LogServiceErrorAndDisconnectAsync(context);
			}
		}

		private static async Task<CharacterOptionsResponsePayload> HandleNoKeybindStoredAsync(ServiceResolveResult<IGameConfigurationService<PsobbGameConfigurationType>> resolveResult, CancellationToken token)
		{
			await resolveResult.Instance.UpdateGameConfigAsync(new GameConfigurationUpdateRequest<PsobbGameConfigurationType>(ConfigurationSourceType.Account, PsobbGameConfigurationType.Key, DefaultKeyboardConfig), token);
			await resolveResult.Instance.UpdateGameConfigAsync(new GameConfigurationUpdateRequest<PsobbGameConfigurationType>(ConfigurationSourceType.Account, PsobbGameConfigurationType.Joystick, DefaultJoystickConfig), token);

			return new CharacterOptionsResponsePayload(new CharacterOptionsConfiguration(new BindingsConfig(DefaultKeyboardConfig, DefaultJoystickConfig), 1, new AccountTeamInformation(0, new uint[2], 0, 0, String.Empty, 0)));
		}

		private async Task<CharacterOptionsResponsePayload> LogServiceErrorAndDisconnectAsync(SessionMessageContext<PSOBBGamePacketPayloadServer> context)
		{
			if (context == null) throw new ArgumentNullException(nameof(context));

			if (Logger.IsErrorEnabled)
				Logger.Error($"Service: {nameof(IGameConfigurationService<PsobbGameConfigurationType>)} unavailable or a failure occurred when querying config data.");

			await context.ConnectionService.DisconnectAsync();
			return default;
		}

		//TODO: Create default GameConfig table for keybinds in library
		//Thanks to Soly
		public static byte[] DefaultKeyboardConfig = new byte[0x16C]
		{
			0x00, 0x00, 0x00, 0x00, 0x26, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x61, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x59, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x5E, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x5D, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x5C, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x5F, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x5D, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x5C, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x5F, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x56, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x5E, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x49, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x4A, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x4B, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x2A, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x2B, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x2C, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x2D, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x2E, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x2F, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x31, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00,
			0x01, 0x00, 0x00, 0x00,
		};

		//TODO: Create default GameConfig table for keybinds in library
		//Thanks to Soly
		public static byte[] DefaultJoystickConfig = new byte[0x38]
		{
			0x00, 0x01, 0xFF, 0xFF, 0x00, 0x00, 0x01, 0x00,
			0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00,
			0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x00, 0x00,
			0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
			0x08, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
			0x20, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
			0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
		};
	}
}
